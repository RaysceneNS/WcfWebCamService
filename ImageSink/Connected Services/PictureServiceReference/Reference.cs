//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageSink.PictureServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PictureServiceReference.IPictureService")]
    public interface IPictureService {
        
        // CODEGEN: Generating message contract since the wrapper name (FileUploadMessage) of message FileUploadMessage does not match the default value (UploadImage)
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPictureService/UploadImage")]
        void UploadImage(ImageSink.PictureServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPictureService/UploadImage")]
        System.Threading.Tasks.Task UploadImageAsync(ImageSink.PictureServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPictureService/DownloadImage", ReplyAction="http://tempuri.org/IPictureService/DownloadImageResponse")]
        byte[] DownloadImage(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPictureService/DownloadImage", ReplyAction="http://tempuri.org/IPictureService/DownloadImageResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadImageAsync(string key);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] FileBytes;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string Key, byte[] FileBytes) {
            this.Key = Key;
            this.FileBytes = FileBytes;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPictureServiceChannel : ImageSink.PictureServiceReference.IPictureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PictureServiceClient : System.ServiceModel.ClientBase<ImageSink.PictureServiceReference.IPictureService>, ImageSink.PictureServiceReference.IPictureService {
        
        public PictureServiceClient() {
        }
        
        public PictureServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PictureServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PictureServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PictureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ImageSink.PictureServiceReference.IPictureService.UploadImage(ImageSink.PictureServiceReference.FileUploadMessage request) {
            base.Channel.UploadImage(request);
        }
        
        public void UploadImage(string Key, byte[] FileBytes) {
            ImageSink.PictureServiceReference.FileUploadMessage inValue = new ImageSink.PictureServiceReference.FileUploadMessage();
            inValue.Key = Key;
            inValue.FileBytes = FileBytes;
            ((ImageSink.PictureServiceReference.IPictureService)(this)).UploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task ImageSink.PictureServiceReference.IPictureService.UploadImageAsync(ImageSink.PictureServiceReference.FileUploadMessage request) {
            return base.Channel.UploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task UploadImageAsync(string Key, byte[] FileBytes) {
            ImageSink.PictureServiceReference.FileUploadMessage inValue = new ImageSink.PictureServiceReference.FileUploadMessage();
            inValue.Key = Key;
            inValue.FileBytes = FileBytes;
            return ((ImageSink.PictureServiceReference.IPictureService)(this)).UploadImageAsync(inValue);
        }
        
        public byte[] DownloadImage(string key) {
            return base.Channel.DownloadImage(key);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadImageAsync(string key) {
            return base.Channel.DownloadImageAsync(key);
        }
    }
}
